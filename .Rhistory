## Verify
colData(cc_qf)
## Extract a copy of the raw PSM-level data
raw_data_copy <- cc_qf[["psms_raw"]]
## Re-add the assay to our QFeatures object with a new name
cc_qf <- addAssay(x = cc_qf,
y = raw_data_copy,
name = "psms_filtered")
## Check which assay links exist for the psms_filtered assay
assayLink(x = cc_qf,
i = "psms_filtered")
## Create assay link
cc_qf <- addAssayLink(object = cc_qf,
from = "psms_filtered",
to = "psms_raw",
varFrom = "Master.Protein.Accessions",
varTo = "Master.Protein.Accessions")
## Verify
assayLink(x = cc_qf,
i = "psms_raw")
## filterFeatures removes any features that return TRUE for the provided statement
## filterFeatures can be applied to only the assay(s) of choice by specifying the i = argument
cc_qf <- cc_qf %>%
filterFeatures(~ Master.Protein.Accessions != "",
i = "psms_filtered")
cc_qf <- cc_qf %>%
filterFeatures(~ Contaminant == "True", i = "psms_filtered") %>%
filterFeatures(~ Quan.Info == "NoQuanLabels", i = "psms_filtered") %>%
filterFeatures(~ Rank != 1, i = "psms_filtered") %>%
filterFeatures(~ Search.Engine.Rank != 1, i = "psms_filtered") %>%
filterFeatures(~ PSM.Ambiguity != "Unambiguous") %>%
filterFeatures(~ Number.of.Protein.Groups != 1)
cc_qf
knitr::include_graphics("figs/summarized-experiment.png", error = FALSE)
knitr::include_graphics("figs/qfeatures.png", error = FALSE)
## Import data into QF object
cc_qf <- readQFeatures(table = "data/cell_cycle_total_proteome_analysis_PSMs.txt",
ecol = 47:56,
sep = "\t",
name = "psms_raw")
## Verify
cc_qf
## Indexing using position
cc_qf[[1]]
## Indexing using name
cc_qf[["psms_raw"]]
## Look at rowData
cc_qf[["psms_raw"]] %>%
rowData %>%
names()
cc_qf[["psms_raw"]] %>%
assay() %>%
head()
cc_qf[["psms_raw"]] %>%
colData()
## Annotate colData with replicate and condition
cc_qf$sample <- c("Control", "M_1", "M_2", "M_3",
"G1_1", "G1_2", "G1_3",
"DS_1", "DS_2", "DS_3")
cc_qf$rep <- c(NA, rep(1:3, 3))
cc_qf$condition <- c("Pre-treatment", rep(c("M-phase", "G1-phase", "Desynch"), each = 3))
## Change col names to represent the sample
colnames(cc_qf[["psms_raw"]]) <- cc_qf$sample
## Verify
colData(cc_qf)
## Annotate colData with replicate and condition
cc_qf$sample <- c("Control", "M_1", "M_2", "M_3",
"G1_1", "G1_2", "G1_3",
"DS_1", "DS_2", "DS_3")
cc_qf$rep <- c(NA, rep(1:3, 3))
cc_qf$condition <- c("Pre-treatment", rep(c("M-phase", "G1-phase", "Desynch"), each = 3))
## Change col names to represent the sample
colnames(cc_qf[["psms_raw"]]) <- cc_qf$sample
## Verify
colData(cc_qf)
cc_qf
## Check which assay links exist for the psms_filtered assay
assayLink(x = cc_qf,
i = "psms_filtered")
## Extract a copy of the raw PSM-level data
raw_data_copy <- cc_qf[["psms_raw"]]
## Re-add the assay to our QFeatures object with a new name
cc_qf <- addAssay(x = cc_qf,
y = raw_data_copy,
name = "psms_filtered")
## Check which assay links exist for the psms_filtered assay
assayLink(x = cc_qf,
i = "psms_filtered")
## Create assay link
cc_qf <- addAssayLink(object = cc_qf,
from = "psms_filtered",
to = "psms_raw",
varFrom = "Master.Protein.Accessions",
varTo = "Master.Protein.Accessions")
## Verify
assayLink(x = cc_qf,
i = "psms_raw")
cc_qf
## filterFeatures removes any features that return TRUE for the provided statement
## filterFeatures can be applied to only the assay(s) of choice by specifying the i = argument
cc_qf <- cc_qf %>%
filterFeatures(~ Master.Protein.Accessions != "", i = "psms_filtered")
cc_qf
cc_qf <- cc_qf %>%
filterFeatures(~ Contaminant == "True", i = "psms_filtered")
cc_qf
cc_qf <- cc_qf %>%
filterFeatures(~ Contaminant == "True", i = "psms_filtered") %>%
filterFeatures(~ Quan.Info == "NoQuanLabels", i = "psms_filtered")
cc_qf
cc_qf <- cc_qf %>%
filterFeatures(~ Contaminant == "True", i = "psms_filtered") %>%
filterFeatures(~ Quan.Info == "NoQuanLabels", i = "psms_filtered") %>%
filterFeatures(~ Rank != 1, i = "psms_filtered") %>%
cc_qf <- cc_qf %>%
filterFeatures(~ Contaminant == "True", i = "psms_filtered") %>%
filterFeatures(~ Quan.Info == "NoQuanLabels", i = "psms_filtered") %>%
filterFeatures(~ Rank != 1, i = "psms_filtered")
cc_qf
knitr::include_graphics("figs/summarized-experiment.png", error = FALSE)
knitr::include_graphics("figs/qfeatures.png", error = FALSE)
## Import data into QF object
cc_qf <- readQFeatures(table = "data/cell_cycle_total_proteome_analysis_PSMs.txt",
ecol = 47:56,
sep = "\t",
name = "psms_raw")
## Verify
cc_qf
## Indexing using position
cc_qf[[1]]
## Indexing using name
cc_qf[["psms_raw"]]
## Look at rowData
cc_qf[["psms_raw"]] %>%
rowData %>%
names()
cc_qf[["psms_raw"]] %>%
assay() %>%
head()
cc_qf[["psms_raw"]] %>%
colData()
## Annotate colData with replicate and condition
cc_qf$sample <- c("Control", "M_1", "M_2", "M_3",
"G1_1", "G1_2", "G1_3",
"DS_1", "DS_2", "DS_3")
cc_qf$rep <- c(NA, rep(1:3, 3))
cc_qf$condition <- c("Pre-treatment", rep(c("M-phase", "G1-phase", "Desynch"), each = 3))
## Change col names to represent the sample
colnames(cc_qf[["psms_raw"]]) <- cc_qf$sample
## Verify
colData(cc_qf)
## Annotate colData with replicate and condition
cc_qf$sample <- c("Control", "M_1", "M_2", "M_3",
"G1_1", "G1_2", "G1_3",
"DS_1", "DS_2", "DS_3")
cc_qf$rep <- c(NA, rep(1:3, 3))
cc_qf$condition <- c("Pre-treatment", rep(c("M-phase", "G1-phase", "Desynch"), each = 3))
## Change col names to represent the sample
colnames(cc_qf[["psms_raw"]]) <- cc_qf$sample
## Verify
colData(cc_qf)
## Extract a copy of the raw PSM-level data
raw_data_copy <- cc_qf[["psms_raw"]]
## Re-add the assay to our QFeatures object with a new name
cc_qf <- addAssay(x = cc_qf,
y = raw_data_copy,
name = "psms_filtered")
## Check which assay links exist for the psms_filtered assay
assayLink(x = cc_qf,
i = "psms_filtered")
## Create assay link
cc_qf <- addAssayLink(object = cc_qf,
from = "psms_filtered",
to = "psms_raw",
varFrom = "Master.Protein.Accessions",
varTo = "Master.Protein.Accessions")
## Verify
assayLink(x = cc_qf,
i = "psms_raw")
## filterFeatures removes any features that return TRUE for the provided statement
## filterFeatures can be applied to only the assay(s) of choice by specifying the i = argument
cc_qf <- cc_qf %>%
filterFeatures(~ Master.Protein.Accessions != "", i = "psms_filtered")
cc_qf
cc_qf <- cc_qf %>%
filterFeatures(~ Contaminant == "True", i = "psms_filtered") %>%
filterFeatures(~ Quan.Info != "NoQuanLabels", i = "psms_filtered") %>%
filterFeatures(~ Rank == 1, i = "psms_filtered") %>%
filterFeatures(~ Search.Engine.Rank == 1, i = "psms_filtered") %>%
filterFeatures(~ PSM.Ambiguity == "Unambiguous", i = "psms_filtered") %>%
filterFeatures(~ Number.of.Protein.Groups == 1, i = "psms_filtered")
cc_qf
knitr::include_graphics("figs/summarized-experiment.png", error = FALSE)
knitr::include_graphics("figs/qfeatures.png", error = FALSE)
## Import data into QF object
cc_qf <- readQFeatures(table = "data/cell_cycle_total_proteome_analysis_PSMs.txt",
ecol = 47:56,
sep = "\t",
name = "psms_raw")
## Verify
cc_qf
## Indexing using position
cc_qf[[1]]
## Indexing using name
cc_qf[["psms_raw"]]
## Look at rowData
cc_qf[["psms_raw"]] %>%
rowData %>%
names()
cc_qf[["psms_raw"]] %>%
assay() %>%
head()
cc_qf[["psms_raw"]] %>%
colData()
## Annotate colData with replicate and condition
cc_qf$sample <- c("Control", "M_1", "M_2", "M_3",
"G1_1", "G1_2", "G1_3",
"DS_1", "DS_2", "DS_3")
cc_qf$rep <- c(NA, rep(1:3, 3))
cc_qf$condition <- c("Pre-treatment", rep(c("M-phase", "G1-phase", "Desynch"), each = 3))
## Change col names to represent the sample
colnames(cc_qf[["psms_raw"]]) <- cc_qf$sample
## Verify
colData(cc_qf)
## Annotate colData with replicate and condition
cc_qf$sample <- c("Control", "M_1", "M_2", "M_3",
"G1_1", "G1_2", "G1_3",
"DS_1", "DS_2", "DS_3")
cc_qf$rep <- c(NA, rep(1:3, 3))
cc_qf$condition <- c("Pre-treatment", rep(c("M-phase", "G1-phase", "Desynch"), each = 3))
## Change col names to represent the sample
colnames(cc_qf[["psms_raw"]]) <- cc_qf$sample
## Verify
colData(cc_qf)
## Extract a copy of the raw PSM-level data
raw_data_copy <- cc_qf[["psms_raw"]]
## Re-add the assay to our QFeatures object with a new name
cc_qf <- addAssay(x = cc_qf,
y = raw_data_copy,
name = "psms_filtered")
## Check which assay links exist for the psms_filtered assay
assayLink(x = cc_qf,
i = "psms_filtered")
## Create assay link
cc_qf <- addAssayLink(object = cc_qf,
from = "psms_filtered",
to = "psms_raw",
varFrom = "Master.Protein.Accessions",
varTo = "Master.Protein.Accessions")
## Verify
assayLink(x = cc_qf,
i = "psms_raw")
## filterFeatures removes any features that return TRUE for the provided statement
## filterFeatures can be applied to only the assay(s) of choice by specifying the i = argument
cc_qf <- cc_qf %>%
filterFeatures(~ Master.Protein.Accessions != "", i = "psms_filtered")
cc_qf
cc_qf <- cc_qf %>%
filterFeatures(~ Contaminant == "True", i = "psms_filtered")
cc_qf
rowData(cc_qf[["psms_raw"]])$Contaminant %>% table()
knitr::include_graphics("figs/summarized-experiment.png", error = FALSE)
knitr::include_graphics("figs/qfeatures.png", error = FALSE)
## Import data into QF object
cc_qf <- readQFeatures(table = "data/cell_cycle_total_proteome_analysis_PSMs.txt",
ecol = 47:56,
sep = "\t",
name = "psms_raw")
## Verify
cc_qf
## Indexing using position
cc_qf[[1]]
## Indexing using name
cc_qf[["psms_raw"]]
## Look at rowData
cc_qf[["psms_raw"]] %>%
rowData %>%
names()
cc_qf[["psms_raw"]] %>%
assay() %>%
head()
cc_qf[["psms_raw"]] %>%
colData()
## Annotate colData with replicate and condition
cc_qf$sample <- c("Control", "M_1", "M_2", "M_3",
"G1_1", "G1_2", "G1_3",
"DS_1", "DS_2", "DS_3")
cc_qf$rep <- c(NA, rep(1:3, 3))
cc_qf$condition <- c("Pre-treatment", rep(c("M-phase", "G1-phase", "Desynch"), each = 3))
## Change col names to represent the sample
colnames(cc_qf[["psms_raw"]]) <- cc_qf$sample
## Verify
colData(cc_qf)
## Annotate colData with replicate and condition
cc_qf$sample <- c("Control", "M_1", "M_2", "M_3",
"G1_1", "G1_2", "G1_3",
"DS_1", "DS_2", "DS_3")
cc_qf$rep <- c(NA, rep(1:3, 3))
cc_qf$condition <- c("Pre-treatment", rep(c("M-phase", "G1-phase", "Desynch"), each = 3))
## Change col names to represent the sample
colnames(cc_qf[["psms_raw"]]) <- cc_qf$sample
## Verify
colData(cc_qf)
## Extract a copy of the raw PSM-level data
raw_data_copy <- cc_qf[["psms_raw"]]
## Re-add the assay to our QFeatures object with a new name
cc_qf <- addAssay(x = cc_qf,
y = raw_data_copy,
name = "psms_filtered")
## Check which assay links exist for the psms_filtered assay
assayLink(x = cc_qf,
i = "psms_filtered")
## Create assay link
cc_qf <- addAssayLink(object = cc_qf,
from = "psms_filtered",
to = "psms_raw",
varFrom = "Master.Protein.Accessions",
varTo = "Master.Protein.Accessions")
## Verify
assayLink(x = cc_qf,
i = "psms_raw")
## filterFeatures removes any features that return TRUE for the provided statement
## filterFeatures can be applied to only the assay(s) of choice by specifying the i = argument
cc_qf <- cc_qf %>%
filterFeatures(~ Master.Protein.Accessions != "", i = "psms_filtered")
cc_qf <- cc_qf %>%
filterFeatures(~ Contaminant != "True", i = "psms_filtered") %>%
filterFeatures(~ Quan.Info != "NoQuanLabels", i = "psms_filtered") %>%
filterFeatures(~ Rank == 1, i = "psms_filtered") %>%
filterFeatures(~ Search.Engine.Rank == 1, i = "psms_filtered") %>%
filterFeatures(~ PSM.Ambiguity == "Unambiguous", i = "psms_filtered") %>%
filterFeatures(~ Number.of.Protein.Groups == 1, i = "psms_filtered")
cc_qf
cc_qf <- cc_qf %>%
filterFeatures(~ Average.Reporter.SN >= 10, na.rm = TRUE) %>%
filterFeatures(~ Isolation.Interference.in.Percent <= 75, na.rm = TRUE) %>%
filterFeatures(~ SPS.Mass.Matches.in.Percent >= 65, na.rm = TRUE)
cc_qf
nNA(cc_qf, i = "psms_filtered")
## Output the number of missing values (nNA) per column (nNAcols)
nNA(cc_qf, i = "psms_filtered")$nNAcols$nNA
## Visualise the proportion of missing values per sample - check for sample and condition biase
nNA(cc_qf[["psms_filtered"]])$nNAcols %>%
as_tibble() %>%
mutate(condition = colData(cc_qf)$condition) %>%
ggplot(aes(x = name, y = pNA, group = condition, fill = condition)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "Missing values (%)") +
theme_bw()
knitr::include_graphics("figs/summarized-experiment.png", error = FALSE)
knitr::include_graphics("figs/qfeatures.png", error = FALSE)
## Import data into QF object
cc_qf <- readQFeatures(table = "data/cell_cycle_total_proteome_analysis_PSMs.txt",
ecol = 47:56,
sep = "\t",
name = "psms_raw")
## Verify
cc_qf
## Indexing using position
cc_qf[[1]]
## Indexing using name
cc_qf[["psms_raw"]]
## Look at rowData
cc_qf[["psms_raw"]] %>%
rowData %>%
names()
cc_qf[["psms_raw"]] %>%
assay() %>%
head()
cc_qf[["psms_raw"]] %>%
colData()
## Annotate colData with replicate and condition
cc_qf$sample <- c("Control", "M_1", "M_2", "M_3",
"G1_1", "G1_2", "G1_3",
"DS_1", "DS_2", "DS_3")
cc_qf$rep <- c(NA, rep(1:3, 3))
cc_qf$condition <- c("Pre-treatment", rep(c("M-phase", "G1-phase", "Desynch"), each = 3))
## Change col names to represent the sample
colnames(cc_qf[["psms_raw"]]) <- cc_qf$sample
## Verify
colData(cc_qf)
## Annotate colData with replicate and condition
cc_qf$sample <- c("Control", "M_1", "M_2", "M_3",
"G1_1", "G1_2", "G1_3",
"DS_1", "DS_2", "DS_3")
cc_qf$rep <- c(NA, rep(1:3, 3))
cc_qf$condition <- c("Pre-treatment", rep(c("M-phase", "G1-phase", "Desynch"), each = 3))
## Change col names to represent the sample
colnames(cc_qf[["psms_raw"]]) <- cc_qf$sample
## Verify
colData(cc_qf)
## Extract a copy of the raw PSM-level data
raw_data_copy <- cc_qf[["psms_raw"]]
## Re-add the assay to our QFeatures object with a new name
cc_qf <- addAssay(x = cc_qf,
y = raw_data_copy,
name = "psms_filtered")
## Check which assay links exist for the psms_filtered assay
assayLink(x = cc_qf,
i = "psms_filtered")
## Create assay link
cc_qf <- addAssayLink(object = cc_qf,
from = "psms_filtered",
to = "psms_raw",
varFrom = "Master.Protein.Accessions",
varTo = "Master.Protein.Accessions")
## Verify
assayLink(x = cc_qf,
i = "psms_raw")
## filterFeatures removes any features that return TRUE for the provided statement
## filterFeatures can be applied to only the assay(s) of choice by specifying the i = argument
cc_qf <- cc_qf %>%
filterFeatures(~ Master.Protein.Accessions != "", i = "psms_filtered")
cc_qf <- cc_qf %>%
filterFeatures(~ Contaminant != "True", i = "psms_filtered") %>%
filterFeatures(~ Quan.Info != "NoQuanLabels", i = "psms_filtered") %>%
filterFeatures(~ Rank == 1, i = "psms_filtered") %>%
filterFeatures(~ Search.Engine.Rank == 1, i = "psms_filtered") %>%
filterFeatures(~ PSM.Ambiguity == "Unambiguous", i = "psms_filtered") %>%
filterFeatures(~ Number.of.Protein.Groups == 1, i = "psms_filtered")
cc_qf <- cc_qf %>%
filterFeatures(~ Average.Reporter.SN >= 10, na.rm = TRUE, i = "psms_filtered") %>%
filterFeatures(~ Isolation.Interference.in.Percent <= 75, na.rm = TRUE, i = "psms_filtered") %>%
filterFeatures(~ SPS.Mass.Matches.in.Percent >= 65, na.rm = TRUE, i = "psms_filtered")
nNA(cc_qf, i = "psms_filtered")
## Output the number of missing values (nNA) per column (nNAcols)
nNA(cc_qf, i = "psms_filtered")$nNAcols$nNA
## Visualise the proportion of missing values per sample - check for sample and condition biase
nNA(cc_qf[["psms_filtered"]])$nNAcols %>%
as_tibble() %>%
mutate(condition = colData(cc_qf)$condition) %>%
ggplot(aes(x = name, y = pNA, group = condition, fill = condition)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "Missing values (%)") +
theme_bw()
cc_qf
## Visualise the proportion of missing values per sample - check for sample and condition biase
nNA(cc_qf[["psms_raw"]])$nNAcols %>%
as_tibble() %>%
mutate(condition = colData(cc_qf)$condition) %>%
ggplot(aes(x = name, y = pNA, group = condition, fill = condition)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "Missing values (%)") +
theme_bw()
nNA(cc_qf[["psms_filtered"]])$nNArows %>%
filter(pNA > 20) %>%
count()
nNA(cc_qf[["psms_filtered"]])$nNArows %>%
filter(pNA > 20)
which(nNA(cc_qf[["psms_filtered"]])$nNArows > 20) %>%
length()
which(nNA(cc_qf[["psms_filtered"]])$nNArows > 20)
max(nNA(cc_qf[["psms_filtered"]])$nNArows)
nNA(cc_qf[["psms_filtered"]])$nNArows
nNA(cc_qf[["psms_filtered"]])$nNArows$nNA %>%
max()
nNA(cc_qf[["psms_filtered"]])$nNArows$pNA %>%
max()
geom_bar(stat = "identity" +
## Look at the filtered PSMs
nNA(cc_qf[["psms_filtered"]])$nNAcols %>%
## Look at the filtered PSMs
nNA(cc_qf[["psms_filtered"]])$nNAcols %>%
as_tibble() %>%
mutate(condition = colData(cc_qf)$condition) %>%
ggplot(aes(x = name, y = pNA, group = condition, fill = condition)) +
geom_bar(stat = "identity") +
labs(x = "Sample", y = "Missing values (%)") +
theme_bw()
## Look at the filtered PSMs
nNA(cc_qf[["psms_filtered"]])$nNAcols %>%
nNA(cc_qf[["psms_filtered"]])$nNAcols %>%
as_tibble() %>%
mutate(condition = colData(cc_qf)$condition) %>%
ggplot(aes(x = name, y = pNA, group = condition, fill = condition)) +
geom_bar(stat = "identity") +
labs(x = "Sample", y = "Missing values (%)") +
theme_bw()
nNA(cc_qf[["psms_raw"]])$nNAcols %>%
as_tibble() %>%
mutate(condition = colData(cc_qf)$condition) %>%
ggplot(aes(x = name, y = pNA, group = condition, fill = condition)) +
geom_bar(stat = "identity") +
labs(x = "Sample", y = "Missing values (%)") +
theme_bw()
cc_qf <- cc_qf %>%
filterNA(pNA = 0.2, i = "psms_filtered")
## Check which imputation methods are available within the QFeatures impute function
MsCoreUtils::imputeMethods()
cc_qf <- impute(cc_qf,
method = "knn",
i = "psms_filtered",
name = "psms_imputed")
cc_qf <- logTransform(object = cc_qf,
base = 2,
i = "psms_imputed",
name = "log_imputed_psms")
cc_qf <- aggregateFeatures(cc_qf,
i = "log_imputed_psms",
fcol = "Master.Protein.Accessions",
name = "log_proteins",
fun = MsCoreUtils::robustSummary,
na.rm = TRUE)
cc_qf
head(assay(cc_qf[["log_proteins"]]))
cc_qf <- normalize(cc_qf,
i = "log_proteins",
name = "log_norm_proteins",
method = "center.median")
getwd()
setwd("~/repos/Wolfson_Reproducible_R_Website")
rmarkdown::render_site()
