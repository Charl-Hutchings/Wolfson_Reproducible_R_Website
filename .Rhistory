## filterFeatures removes any features that return TRUE for the provided statement
## filterFeatures can be applied to only the assay(s) of choice by specifying the i = argument
cc_qf <- cc_qf %>%
filterFeatures(~ Master.Protein.Accessions != "", i = "psms_filtered")
cc_qf <- cc_qf %>%
filterFeatures(~ Contaminant != "True", i = "psms_filtered") %>%
filterFeatures(~ Quan.Info != "NoQuanLabels", i = "psms_filtered") %>%
filterFeatures(~ Rank == 1, i = "psms_filtered") %>%
filterFeatures(~ Search.Engine.Rank == 1, i = "psms_filtered") %>%
filterFeatures(~ PSM.Ambiguity == "Unambiguous", i = "psms_filtered") %>%
filterFeatures(~ Number.of.Protein.Groups == 1, i = "psms_filtered")
cc_qf
cc_qf <- cc_qf %>%
filterFeatures(~ Average.Reporter.SN >= 10, na.rm = TRUE) %>%
filterFeatures(~ Isolation.Interference.in.Percent <= 75, na.rm = TRUE) %>%
filterFeatures(~ SPS.Mass.Matches.in.Percent >= 65, na.rm = TRUE)
cc_qf
nNA(cc_qf, i = "psms_filtered")
## Output the number of missing values (nNA) per column (nNAcols)
nNA(cc_qf, i = "psms_filtered")$nNAcols$nNA
## Visualise the proportion of missing values per sample - check for sample and condition biase
nNA(cc_qf[["psms_filtered"]])$nNAcols %>%
as_tibble() %>%
mutate(condition = colData(cc_qf)$condition) %>%
ggplot(aes(x = name, y = pNA, group = condition, fill = condition)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "Missing values (%)") +
theme_bw()
knitr::include_graphics("figs/summarized-experiment.png", error = FALSE)
knitr::include_graphics("figs/qfeatures.png", error = FALSE)
## Import data into QF object
cc_qf <- readQFeatures(table = "data/cell_cycle_total_proteome_analysis_PSMs.txt",
ecol = 47:56,
sep = "\t",
name = "psms_raw")
## Verify
cc_qf
## Indexing using position
cc_qf[[1]]
## Indexing using name
cc_qf[["psms_raw"]]
## Look at rowData
cc_qf[["psms_raw"]] %>%
rowData %>%
names()
cc_qf[["psms_raw"]] %>%
assay() %>%
head()
cc_qf[["psms_raw"]] %>%
colData()
## Annotate colData with replicate and condition
cc_qf$sample <- c("Control", "M_1", "M_2", "M_3",
"G1_1", "G1_2", "G1_3",
"DS_1", "DS_2", "DS_3")
cc_qf$rep <- c(NA, rep(1:3, 3))
cc_qf$condition <- c("Pre-treatment", rep(c("M-phase", "G1-phase", "Desynch"), each = 3))
## Change col names to represent the sample
colnames(cc_qf[["psms_raw"]]) <- cc_qf$sample
## Verify
colData(cc_qf)
## Annotate colData with replicate and condition
cc_qf$sample <- c("Control", "M_1", "M_2", "M_3",
"G1_1", "G1_2", "G1_3",
"DS_1", "DS_2", "DS_3")
cc_qf$rep <- c(NA, rep(1:3, 3))
cc_qf$condition <- c("Pre-treatment", rep(c("M-phase", "G1-phase", "Desynch"), each = 3))
## Change col names to represent the sample
colnames(cc_qf[["psms_raw"]]) <- cc_qf$sample
## Verify
colData(cc_qf)
## Extract a copy of the raw PSM-level data
raw_data_copy <- cc_qf[["psms_raw"]]
## Re-add the assay to our QFeatures object with a new name
cc_qf <- addAssay(x = cc_qf,
y = raw_data_copy,
name = "psms_filtered")
## Check which assay links exist for the psms_filtered assay
assayLink(x = cc_qf,
i = "psms_filtered")
## Create assay link
cc_qf <- addAssayLink(object = cc_qf,
from = "psms_filtered",
to = "psms_raw",
varFrom = "Master.Protein.Accessions",
varTo = "Master.Protein.Accessions")
## Verify
assayLink(x = cc_qf,
i = "psms_raw")
## filterFeatures removes any features that return TRUE for the provided statement
## filterFeatures can be applied to only the assay(s) of choice by specifying the i = argument
cc_qf <- cc_qf %>%
filterFeatures(~ Master.Protein.Accessions != "", i = "psms_filtered")
cc_qf <- cc_qf %>%
filterFeatures(~ Contaminant != "True", i = "psms_filtered") %>%
filterFeatures(~ Quan.Info != "NoQuanLabels", i = "psms_filtered") %>%
filterFeatures(~ Rank == 1, i = "psms_filtered") %>%
filterFeatures(~ Search.Engine.Rank == 1, i = "psms_filtered") %>%
filterFeatures(~ PSM.Ambiguity == "Unambiguous", i = "psms_filtered") %>%
filterFeatures(~ Number.of.Protein.Groups == 1, i = "psms_filtered")
cc_qf <- cc_qf %>%
filterFeatures(~ Average.Reporter.SN >= 10, na.rm = TRUE, i = "psms_filtered") %>%
filterFeatures(~ Isolation.Interference.in.Percent <= 75, na.rm = TRUE, i = "psms_filtered") %>%
filterFeatures(~ SPS.Mass.Matches.in.Percent >= 65, na.rm = TRUE, i = "psms_filtered")
nNA(cc_qf, i = "psms_filtered")
## Output the number of missing values (nNA) per column (nNAcols)
nNA(cc_qf, i = "psms_filtered")$nNAcols$nNA
## Visualise the proportion of missing values per sample - check for sample and condition biase
nNA(cc_qf[["psms_filtered"]])$nNAcols %>%
as_tibble() %>%
mutate(condition = colData(cc_qf)$condition) %>%
ggplot(aes(x = name, y = pNA, group = condition, fill = condition)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "Missing values (%)") +
theme_bw()
cc_qf
## Visualise the proportion of missing values per sample - check for sample and condition biase
nNA(cc_qf[["psms_raw"]])$nNAcols %>%
as_tibble() %>%
mutate(condition = colData(cc_qf)$condition) %>%
ggplot(aes(x = name, y = pNA, group = condition, fill = condition)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "Missing values (%)") +
theme_bw()
nNA(cc_qf[["psms_filtered"]])$nNArows %>%
filter(pNA > 20) %>%
count()
nNA(cc_qf[["psms_filtered"]])$nNArows %>%
filter(pNA > 20)
which(nNA(cc_qf[["psms_filtered"]])$nNArows > 20) %>%
length()
which(nNA(cc_qf[["psms_filtered"]])$nNArows > 20)
max(nNA(cc_qf[["psms_filtered"]])$nNArows)
nNA(cc_qf[["psms_filtered"]])$nNArows
nNA(cc_qf[["psms_filtered"]])$nNArows$nNA %>%
max()
nNA(cc_qf[["psms_filtered"]])$nNArows$pNA %>%
max()
geom_bar(stat = "identity" +
## Look at the filtered PSMs
nNA(cc_qf[["psms_filtered"]])$nNAcols %>%
## Look at the filtered PSMs
nNA(cc_qf[["psms_filtered"]])$nNAcols %>%
as_tibble() %>%
mutate(condition = colData(cc_qf)$condition) %>%
ggplot(aes(x = name, y = pNA, group = condition, fill = condition)) +
geom_bar(stat = "identity") +
labs(x = "Sample", y = "Missing values (%)") +
theme_bw()
## Look at the filtered PSMs
nNA(cc_qf[["psms_filtered"]])$nNAcols %>%
nNA(cc_qf[["psms_filtered"]])$nNAcols %>%
as_tibble() %>%
mutate(condition = colData(cc_qf)$condition) %>%
ggplot(aes(x = name, y = pNA, group = condition, fill = condition)) +
geom_bar(stat = "identity") +
labs(x = "Sample", y = "Missing values (%)") +
theme_bw()
nNA(cc_qf[["psms_raw"]])$nNAcols %>%
as_tibble() %>%
mutate(condition = colData(cc_qf)$condition) %>%
ggplot(aes(x = name, y = pNA, group = condition, fill = condition)) +
geom_bar(stat = "identity") +
labs(x = "Sample", y = "Missing values (%)") +
theme_bw()
cc_qf <- cc_qf %>%
filterNA(pNA = 0.2, i = "psms_filtered")
## Check which imputation methods are available within the QFeatures impute function
MsCoreUtils::imputeMethods()
cc_qf <- impute(cc_qf,
method = "knn",
i = "psms_filtered",
name = "psms_imputed")
cc_qf <- logTransform(object = cc_qf,
base = 2,
i = "psms_imputed",
name = "log_imputed_psms")
cc_qf <- aggregateFeatures(cc_qf,
i = "log_imputed_psms",
fcol = "Master.Protein.Accessions",
name = "log_proteins",
fun = MsCoreUtils::robustSummary,
na.rm = TRUE)
cc_qf
head(assay(cc_qf[["log_proteins"]]))
cc_qf <- normalize(cc_qf,
i = "log_proteins",
name = "log_norm_proteins",
method = "center.median")
getwd()
?prcomp
getwd()
setwd("~/repos/Wolfson_Reproducible_R_Website")
2 %% 2
? %%
?%%
?"%%"
cumulative_even_sum <- function(x, y) {
values <- x:y    # first get all integers between the two values
even <- values[which(values %% 2 == 0)]
sum_even <- sum(even)
}
cumulative_even_sum(0, 10)
sum(even)
cumulative_even_sum <- function(x, y) {
values <- x:y    # first get all integers between the two values
even <- values[which(values %% 2 == 0)]
sum(even)
}
cumulative_even_sum(0, 10)
for (month in 1:5) {
print(paste("Month:", month))
}
for (month in 1:5) {
if (month < 3) {
print(paste("Winter, month", month))
}
else {
print(paste("Spring, month", month))
}
}
for (x in 1:5) {
print(x)
}
month_vector <- c()
for (month in 1:5) {
month <- (paste("Month:", month))
month_vector <- c(month_vector, month)
}
for (month in 1:5) {
if (month < 3) {
print(paste("Winter"))
}
else {
print(paste("Spring"))
}
}
seasons_vector <- c()
for (month in 1:5) {
if (month < 3) {
assign(season, paste("Winter"))
}
else {
assign(season, paste("Spring"))
}
seasons_vector <- c(seasons_vector, season)
}
seasons_vector <- c()
for (month in 1:5) {
if (month < 3) {
assign("season", paste("Winter"), .GlobalEnv)
}
else {
assign("season", paste("Spring"))
}
seasons_vector <- c(seasons_vector, season, .GlobalEnv)
}
View(seasons_vector)
seasons_vector <- c()
for (month in 1:5) {
if (month < 3) {
assign("season", paste("Winter"), .GlobalEnv)
}
else {
assign("season", paste("Spring") .GlobalEnv)
seasons_vector <- c()
for (month in 1:5) {
if (month < 3) {
assign("season", paste("Winter"), .GlobalEnv)
}
else {
assign("season", paste("Spring"), .GlobalEnv)
}
seasons_vector <- c(seasons_vector, season)
}
seasons_vector <- c()
for (month in 1:5) {
if (month < 3) {
seasons_vector <- c(seasons_vector, "Winter")
}
else {
seasons_vector <- c(seasons_vector, "Spring")
}
}
month_vector <- c()
for (month in 1:5) {
month <- (paste("Month:", month))
month_vector <- c(month_vector, month)
}
df_1 <- data.frame(month_vector, seasons_vector)
## Store data frames in a list
all_dfs <- list(df_1, df_2, df_3)
## Create example data frames
df_1 <- data.frame(month_vector, seasons_vector)
df_2 <- df_1
df_3 <- df_1
## Store data frames in a list
all_dfs <- list(df_1, df_2, df_3)
View(df_1)
name(all_dfs[[1]])
names(all_dfs[[1]])
names(all_dfs)[1]
## Store new names
new_names <- c("updated_df1", "updated_df2", "updated_df3")
for (i in length(all_dfs)) {
df <- all_dfs[[i]]
df <- df %>%
as_tibble %>%
mutate(weather = ifelse(seasons_vector == "Winter", "cold", "warm"))
assign((new_names[[i]]), df, .GlobalEnv)
}
library(tidyverse)
for (i in length(all_dfs)) {
df <- all_dfs[[i]]
df <- df %>%
as_tibble %>%
mutate(weather = ifelse(seasons_vector == "Winter", "cold", "warm"))
assign((new_names[[i]]), df, .GlobalEnv)
}
View(updated_df3)
for (i in length(all_dfs)) {
df <- all_dfs[[i]]
new_df <- df %>%
as_tibble %>%
mutate(weather = ifelse(seasons_vector == "Winter", "cold", "warm"))
assign((new_names[[i]]), new_df, .GlobalEnv)
}
new_names
length(all_dfs)
for (i in 1:length(all_dfs)) {
df <- all_dfs[[i]]
new_df <- df %>%
as_tibble %>%
mutate(weather = ifelse(seasons_vector == "Winter", "cold", "warm"))
assign((new_names[[i]]), new_df, .GlobalEnv)
}
lapply(X = c(1.34, 1.78, 2.34, 1.12), FUN = round())
lapply(X = c(1.34, 1.78, 2.34, 1.12), FUN = round)
## Using lapply with a user-defined function
lapply(X = c(1.34, 1.78, 2.34, 1.12), FUN = function(x){
x + 1
})
## Using lapply with a user-defined function
sapply(X = c(1.34, 1.78, 2.34, 1.12), FUN = function(x){
x + 1
})
knitr::include_graphics("images/loops.png")
## Define function
circumference <- function(r) {
2 * pi * r
}
## Use function
circumference(r = 2)
## Define function with default value of r
circumference <- function(r = 1) {
2 * pi * r
}
## Use function without specifying r
circumference()
## Use function and override default value of r
circumference(r = 5)
circumference <- function(r = 1) {
2 * pi * r
if (r < 0) {
return(NaN)
}
}
circumference(r = -3)
subtract_two_nums <- function(x, y) {
answer <- x - y
}
subtract_two_nums(x = 9, y = 6)
subtract_two_nums <- function(x, y) {
answer <- x - y
assign("result", answer, envir =  .GlobalEnv)
}
subtract_two_nums(x = 9, y = 6)
subtract_two_nums <- function(x, y) {
answer <- x - y
assign("result", answer, envir =  .GlobalEnv)
print(answer)
}
subtract_two_nums(x = 9, y = 6)
## Define function
add_three <- function(x) {
answer <- x + 7
assign("updated_x", answer, envir = .GlobalEnv)
print(answer)
}
## Test function
add_three(x = 8)
cumulative_even_sum <- function(x, y) {
values <- x:y    # first get all integers between the two values
even <- values[which(values %% 2 == 0)]  # subset values that have a remainder of 0 when divided by 2
sum(even)  # sum the even values
}
cumulative_even_sum(0, 10)
knitr::include_graphics("images/loops.png")
for (x in 1:5) {
print(x)
}
for (month in 1:5) {
print(paste("Month:", month))
}
for (month in 1:5) {
if (month < 3) {
print(paste("Winter"))
}
else {
print(paste("Spring"))
}
}
month_vector <- c()
for (month in 1:5) {
month <- (paste("Month:", month))
month_vector <- c(month_vector, month)
}
seasons_vector <- c()
for (month in 1:5) {
if (month < 3) {
seasons_vector <- c(seasons_vector, "Winter")
}
else {
seasons_vector <- c(seasons_vector, "Spring")
}
}
## Create example data frames
df_1 <- data.frame(month_vector, seasons_vector)
df_2 <- df_1
df_3 <- df_1
## Store data frames in a list
all_dfs <- list(df_1, df_2, df_3)
## Store new names
new_names <- c("updated_df1", "updated_df2", "updated_df3")
for (i in 1:length(all_dfs)) {
df <- all_dfs[[i]]
new_df <- df %>%
as_tibble %>%
mutate(weather = ifelse(seasons_vector == "Winter", "cold", "warm"))
assign((new_names[[i]]), new_df, .GlobalEnv)
}
## Using lapply with a pre-existing function
lapply(X = c(1.34, 1.78, 2.34, 1.12), FUN = round)
## Using lapply with a user-defined function
lapply(X = c(1.34, 1.78, 2.34, 1.12), FUN = function(x){
x + 1
})
View(updated_df1)
View(df_3)
View(df_1)
sapply(X = list(df_1, df_2, df_3), FUN = function(x){
table(x[2])
})
table(df_1[2])
sapply(X = list(df_1, df_2, df_3), FUN = function(x){
table(x[2]) %>%    #Create a table summarising how many spring and winter (stored in column 2 of each df)
sort(decreasing = "TRUE")
})
table(x[2]) %>%    #Create a table summarising how many spring and winter (stored in column 2 of each df)
sort(decreasing = TRUE)
sapply(X = list(df_1, df_2, df_3), FUN = function(x){
table(x[2]) %>%    #Create a table summarising how many spring and winter (stored in column 2 of each df)
sort(decreasing = TRUE)
})
sapply(X = list(df_1, df_2, df_3), FUN = function(x){
table(x[2]) %>%    #Create a table summarising how many spring and winter (stored in column 2 of each df)
sort(decreasing = TRUE)[1]
})
sapply(X = list(df_1, df_2, df_3), FUN = function(x){
table(x[2]) %>%    #Create a table summarising how many spring and winter (stored in column 2 of each df)
sort(decreasing = TRUE)[1]
})
sapply(X = list(df_1, df_2, df_3), FUN = function(x){
table(x[2]) %>%    #Create a table summarising how many spring and winter (stored in column 2 of each df)
sort(decreasing = TRUE)
})
## Put objects into a list
updated_dfs <- list(updated_df1, updated_df2, updated_df3)
new_names <- c("updated_df1", "updated_df2", "updated_df3")
for (i in 1:length(updates_dfs)) {
df <- updates_dfs[[i]]
df$temp <- c(4.8, 5.2, 13, 14.1, 12.7)
assign((new_names[[i]]), df, .GlobalEnv)
}
## Put objects into a list
updated_dfs <- list(updated_df1, updated_df2, updated_df3)
new_names <- c("updated_df1", "updated_df2", "updated_df3")
for (i in 1:length(updated_dfs)) {
df <- updated_dfs[[i]]
df$temp <- c(4.8, 5.2, 13, 14.1, 12.7)
assign((new_names[[i]]), df, .GlobalEnv)
}
View(updated_df1)
View(updated_df2)
## Use sapply to get vector containing mean temperature
sapply(X = updated_dfs, FUN = function(x) {
x %>%
as_tibble() %>%
pull(temp) %>%
mean()
})
View(updated_df3)
updated_df3 %>% as_tibble() %>% pull(temp)
## Use sapply to get vector containing mean temperature
updated_dfs_v2 <- list(updated_df1, updated_df2, updated_df3)
sapply(X = updated_dfs_v2, FUN = function(x) {
x %>%
as_tibble() %>%
pull(temp) %>%
mean()
})
rmarkdown::render_site()
rmarkdown::render_site()
